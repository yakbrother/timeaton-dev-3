---
export interface Props {
  activeNav?: string;
}

const { activeNav } = Astro.props;
---

<header>
  <div class="nav-container solway-regular">

      <a href="/" id="home">
        &gt;_&nbsp;Home
      </a>
      <nav id="nav-menu">
        <ul id="menu-items" class="display-none sm:flex">
          <li>
            <a href="/posts/" class={activeNav === "posts" ? "active" : ""}>
                Posts
            </a>
          </li>
          <li>
            <a href="/found/" class={activeNav === "found" ? "active" : ""}>
                Found
            </a>
          </li>
          <li>
            <a href="/resume/" class={activeNav === "resume" ? "active" : ""}>
              Resume
            </a>
          </li>
          <li>
            <a href="/about/" class={activeNav === "about" ? "active" : ""}>
              About
            </a>
          </li>
          
        
        <li  class="theme-switcher" id="theme-switcher-toggle">
        
        <div class="theme-container">
    <button
      :class="['theme-toggle', { 'dark-mode': darkMode }]"
      aria-label="Toggle theme"
    >
      <div class="toggle-thumb">
        <svg
          v-if="!darkMode"
          class="sun-icon"
          viewBox="0 0 24 24"
          fill="none"
          stroke="currentColor"
        >
          <circle cx="12" cy="12" r="5" />
          <path
            d="M12 1v2m0 18v2M4.22 4.22l1.42 1.42m12.72 12.72l1.42 1.42M1 12h2m18 0h2M4.22 19.78l1.42-1.42M18.36 5.64l1.42-1.42"
          />
        </svg>
        <svg
          v-else
          class="moon-icon"
          viewBox="0 0 24 24"
          fill="none"
          stroke="currentColor"
        >
          <path d="M21 12.79A9 9 0 1111.21 3 7 7 0 0021 12.79z" />
        </svg>
      </div>
    </button>
      
        </li>
           
        </ul>
      </nav>
    
  </div>
  <hr />
</header>

<style>

  #home {
    white-space: nowrap;
  }

  .nav-container {
    display: flex; 
    flex-direction: column; 
    justify-content: space-between; 
    align-items: center; 
    max-width: 48rem; 

    @media (min-width: 640px) { 
        flex-direction: row; 
    }  
  }
  .top-nav-wrap {
    display: flex; 
    position: relative; 
    padding: 1rem; 
    justify-content: space-between; 
    align-items: flex-start; 
    width: 100%; 

    @media (min-width: 640px) { 
        padding-top: 2rem;
        padding-bottom: 2rem; 
        align-items: center; 
    }
  }
  .home {
    position: absolute; 
    padding-top: 0.25rem;
    padding-bottom: 0.25rem; 
    font-size: 1.25rem;
    line-height: 1.75rem; 
    font-weight: 600; 

    @media (min-width: 640px) { 
        position: static; 
        font-size: 1.5rem;
        line-height: 2rem; 
    }

  }


  nav {
    display: flex; 
    flex-direction: row; 
    align-items: center; 
    width: 100%; 

    @media (min-width: 640px) { 
        padding-top: 0;
        padding-bottom: 0; 
        margin-left: 0.5rem; 
        margin-left: 1rem; 
        flex-direction: row; 
        justify-content: flex-end; 
    }          
  }
  nav ul {
    display: grid 
    margin-top: 1rem; 
    grid-template-columns: repeat(2, minmax(0, 1fr)); 
    column-gap: 0.5rem; 
    width: 11rem; 

    @media (min-width: 640px) { 
        margin-top: 0; 
        margin-left: 0; 
        column-gap: 1.25rem; 
        row-gap: 0; 
        width: auto; 
    }
  }
  nav ul li {
    display: flex; 
    grid-column: span 2 / span 2; 
    justify-content: center; 
    align-items: center; 
  }
  nav ul li a {
    padding-top: 0.75rem;
    padding-bottom: 0.75rem; 
    padding-left: 1rem;
    padding-right: 1rem; 
    width: 100%; 
    font-weight: 500; 
    text-align: center; 

    @media (min-width: 640px) { 
        padding-top: 0.25rem;
        padding-bottom: 0.25rem; 
        padding-left: 0.5rem;
        padding-right: 0.5rem; 
        margin-top: 0;
        margin-bottom: 0; 
    }
  }
  nav ul li:nth-last-child(2) a {
    width: auto;
  }
  nav ul li:nth-last-child(1),
  nav ul li:nth-last-child(2) {
    grid-column: span 1 / span 1;
  }
  nav .active {
    text-decoration: underline; 
    text-decoration-thickness: 2px; 
    text-underline-offset: 4px; 
  }
  nav a.active svg {
    ##FIXME: color
  }

  nav button {
    padding: 0.25rem;
  }
  nav button svg {
    width: 1.5rem; 
    height: 1.5rem; 
  }
  #theme-btn {
    padding: 0.75rem; 

    @media (min-width: 640px) { 
        padding: 0.25rem; 
    }
  }
  #theme-btn svg {
    --transform-scale-x: 1.25;
    --transform-scale-y: 1.25; 

    @media (min-width: 640px) { 
        --transform-scale-x: 1;
        --transform-scale-y: 1; 
    }

    :hover {
        --transform-rotate: 12deg; 
    }

  }

  .menu-icon line {
    transition-property: opacity;
    transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
    transition-duration: 300ms; 
    transition-duration: 75ms; 
    transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1); 
  }
  .menu-icon .close {
    opacity: 0;
  }
  .menu-icon.is-active .line {
    opacity: 0%
  }
  .menu-icon.is-active .close {
    opacity: 100%;
  }

  

</style>

<style scoped>
.theme-container {
  display: inline-block;
  padding: 10px;
}

.theme-toggle {
  position: relative;
  width: 60px;
  height: 30px;
  background-color: #e5e7eb;
  border-radius: 15px;
  border: none;
  cursor: pointer;
  padding: 0;
  transition: background-color 0.3s;
}

.theme-toggle.dark-mode {
  background-color: #4b5563;
}

.toggle-thumb {
  position: absolute;
  top: 3px;
  left: 3px;
  width: 24px;
  height: 24px;
  background-color: white;
  border-radius: 50%;
  transition: transform 0.3s;
  display: flex;
  align-items: center;
  justify-content: center;
}

.dark-mode .toggle-thumb {
  transform: translateX(30px);
  background-color: #374151;
}

.sun-icon,
.moon-icon {
  width: 16px;
  height: 16px;
  stroke-width: 2;
}

.sun-icon {
  color: #fbbf24;
}

.moon-icon {
  color: #ffffff;
}
</style>

<script is:inline>
  // Get the current theme preference from local storage
  const storedTheme = localStorage.getItem("theme");

  // Get the user's preferred theme from the browser
  const userPrefersDark = window.matchMedia("(prefers-color-scheme: dark)").matches;

  // Set the default theme to dark
  let theme = "dark";

  // Check if the user has a stored theme preference
  if (storedTheme) {
    theme = storedTheme;
  } else if (!userPrefersDark) {
    // If the user doesn't prefer dark mode, set the theme to light
    theme = "light";
  }

  // Set the theme class on the document element
  document.documentElement.classList.toggle("dark", theme === "dark");

  // Add an event listener to the theme switcher button
  document.getElementById("theme-switcher-toggle").addEventListener("click", () => {
    // Toggle the theme
    theme = theme === "dark" ? "light" : "dark";

    // Update the theme class on the document element
    document.documentElement.classList.toggle("dark", theme === "dark");

    // Store the new theme preference in local storage
    localStorage.setItem("theme", theme);
  });
</script>